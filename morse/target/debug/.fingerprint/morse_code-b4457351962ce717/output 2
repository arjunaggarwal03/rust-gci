{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":142,"byte_end":145,"line_start":9,"line_end":9,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let sen: str = read!();","highlight_start":9,"highlight_end":12}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"all local variables must have a statically known size","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unsized locals are gated as an unstable feature","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: all local variables must have a statically known size\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: unsized locals are gated as an unstable feature\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::read macros>","byte_start":51,"byte_end":57,"line_start":1,"line_end":1,"column_start":52,"column_end":58,"is_primary":true,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":52,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":873,"byte_end":961,"line_start":19,"line_end":20,"column_start":20,"column_end":78,"is_primary":false,"text":[{"text":"             match try_scan !","highlight_start":20,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":873,"byte_end":961,"line_start":19,"line_end":20,"column_start":20,"column_end":78,"is_primary":false,"text":[{"text":"             match try_scan !","highlight_start":20,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1008,"byte_end":1125,"line_start":22,"line_end":24,"column_start":32,"column_end":50,"is_primary":false,"text":[{"text":"                 b'{' => match try_scan !","highlight_start":32,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1008,"byte_end":1125,"line_start":22,"line_end":24,"column_start":32,"column_end":50,"is_primary":false,"text":[{"text":"                 b'{' => match try_scan !","highlight_start":32,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1174,"byte_end":1245,"line_start":26,"line_end":27,"column_start":30,"column_end":61,"is_primary":false,"text":[{"text":"                     b'{' => try_scan !","highlight_start":30,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1174,"byte_end":1245,"line_start":26,"line_end":27,"column_start":30,"column_end":61,"is_primary":false,"text":[{"text":"                     b'{' => try_scan !","highlight_start":30,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1282,"byte_end":1412,"line_start":28,"line_end":30,"column_start":22,"column_end":71,"is_primary":false,"text":[{"text":"                     try_scan !","highlight_start":22,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1282,"byte_end":1412,"line_start":28,"line_end":30,"column_start":22,"column_end":71,"is_primary":false,"text":[{"text":"                     try_scan !","highlight_start":22,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1447,"byte_end":1528,"line_start":31,"line_end":32,"column_start":29,"column_end":71,"is_primary":false,"text":[{"text":"                     return try_scan !","highlight_start":29,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1447,"byte_end":1528,"line_start":31,"line_end":32,"column_start":29,"column_end":71,"is_primary":false,"text":[{"text":"                     return try_scan !","highlight_start":29,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":1493,"byte_end":1496,"line_start":32,"line_end":32,"column_start":36,"column_end":39,"is_primary":true,"text":[{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":36,"highlight_end":39}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::result::Result`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::result::Result`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1555,"byte_end":1602,"line_start":33,"line_end":33,"column_start":26,"column_end":73,"is_primary":false,"text":[{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":26,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1555,"byte_end":1602,"line_start":33,"line_end":33,"column_start":26,"column_end":73,"is_primary":false,"text":[{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":26,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":421,"byte_end":434,"line_start":8,"line_end":8,"column_start":45,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":45,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1662,"byte_end":1709,"line_start":36,"line_end":36,"column_start":11,"column_end":58,"is_primary":false,"text":[{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":11,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":true,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":433,"byte_end":434,"line_start":8,"line_end":8,"column_start":57,"column_end":58,"is_primary":false,"text":[{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":57,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1662,"byte_end":1709,"line_start":36,"line_end":36,"column_start":11,"column_end":58,"is_primary":false,"text":[{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":11,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[{"text":"//Arjun Aggarwal","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::ops::Try` for `std::result::Result<str, text_io::Error>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_read macros>","byte_start":65,"byte_end":239,"line_start":4,"line_end":8,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":9,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::result::Result`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::result::Result`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_read macros>","byte_start":190,"byte_end":192,"line_start":6,"line_end":6,"column_start":77,"column_end":79,"is_primary":true,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":77,"highlight_end":79}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::prelude::v1::Ok`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::prelude::v1::Ok`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_read macros>","byte_start":131,"byte_end":147,"line_start":6,"line_end":6,"column_start":18,"column_end":34,"is_primary":true,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":18,"highlight_end":34}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"all local variables must have a statically known size","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"unsized locals are gated as an unstable feature","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: all local variables must have a statically known size\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: unsized locals are gated as an unstable feature\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":1712,"byte_end":1761,"line_start":36,"line_end":37,"column_start":61,"column_end":36,"is_primary":true,"text":[{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":61,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":1712,"byte_end":1761,"line_start":36,"line_end":37,"column_start":61,"column_end":36,"is_primary":false,"text":[{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":61,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":{"file_name":"<::core::macros::builtin::format_args macros>","byte_start":0,"byte_end":68,"line_start":1,"line_end":1,"column_start":1,"column_end":69,"is_primary":false,"text":[{"text":"($ fmt : expr) => ({ }) ; ($ fmt : expr, $ ($ args : tt) *) => ({ })","highlight_start":1,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libcore/fmt/mod.rs","byte_start":8989,"byte_end":8990,"line_start":278,"line_end":278,"column_start":20,"column_end":21,"is_primary":false,"text":[{"text":"","highlight_start":20,"highlight_end":21}],"label":"required by this bound in `std::fmt::ArgumentV1::<'a>::new`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the size for values of type `str` cannot be known at compilation time","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":191,"byte_end":232,"line_start":5,"line_end":5,"column_start":31,"column_end":72,"is_primary":true,"text":[{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":31,"highlight_end":72}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":191,"byte_end":232,"line_start":5,"line_end":5,"column_start":31,"column_end":72,"is_primary":false,"text":[{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":31,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":{"file_name":"<::core::macros::builtin::format_args macros>","byte_start":0,"byte_end":68,"line_start":1,"line_end":1,"column_start":1,"column_end":69,"is_primary":false,"text":[{"text":"($ fmt : expr) => ({ }) ; ($ fmt : expr, $ ($ args : tt) *) => ({ })","highlight_start":1,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libcore/fmt/mod.rs","byte_start":8989,"byte_end":8990,"line_start":278,"line_end":278,"column_start":20,"column_end":21,"is_primary":false,"text":[{"text":"","highlight_start":20,"highlight_end":21}],"label":"required by this bound in `std::fmt::ArgumentV1::<'a>::new`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::marker::Sized` is not implemented for `str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `str` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::marker::Sized` is not implemented for `str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `str: std::str::FromStr` is not satisfied","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"<::text_io::try_scan macros>","byte_start":1328,"byte_end":1341,"line_start":29,"line_end":29,"column_start":36,"column_end":49,"is_primary":true,"text":[{"text":"                     (@ $ action : parse_capture","highlight_start":36,"highlight_end":49}],"label":"the trait `std::str::FromStr` is not implemented for `str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":302,"byte_end":372,"line_start":7,"line_end":7,"column_start":5,"column_end":75,"is_primary":false,"text":[{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":5,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_scan macros>","byte_start":76,"byte_end":190,"line_start":3,"line_end":5,"column_start":32,"column_end":30,"is_primary":false,"text":[{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":32,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":150,"byte_end":189,"line_start":6,"line_end":6,"column_start":37,"column_end":76,"is_primary":false,"text":[{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":37,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::try_read macros>","byte_start":8,"byte_end":25,"line_start":1,"line_end":1,"column_start":9,"column_end":26,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::text_io::read macros>","byte_start":24,"byte_end":48,"line_start":1,"line_end":1,"column_start":25,"column_end":49,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":25,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":153,"byte_end":160,"line_start":9,"line_end":9,"column_start":20,"column_end":27,"is_primary":false,"text":[{"text":"    let sen: str = read!();","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"<::text_io::read macros>","byte_start":0,"byte_end":64,"line_start":1,"line_end":1,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"($ ($ arg : tt) *) => { try_read ! ($ ($ arg) *) . unwrap () } ;","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_read!","def_site_span":{"file_name":"<::text_io::try_read macros>","byte_start":0,"byte_end":496,"line_start":1,"line_end":19,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"() => { try_read ! (\"{}\") } ; ($ text : expr) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan ! ($ text, __try_read_var__) ; Ok","highlight_start":1,"highlight_end":79},{"text":"             (__try_read_var__)","highlight_start":1,"highlight_end":32},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ; ($ text : expr, $ input : expr) =>","highlight_start":1,"highlight_end":39},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        (|| -> Result < _, $ crate :: Error >","highlight_start":1,"highlight_end":46},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             let __try_read_var__ ; try_scan !","highlight_start":1,"highlight_end":47},{"text":"             ($ input => $ text, __try_read_var__) ; Ok (__try_read_var__)","highlight_start":1,"highlight_end":75},{"text":"         }) ()","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"try_scan!","def_site_span":{"file_name":"<::text_io::try_scan macros>","byte_start":0,"byte_end":1771,"line_start":1,"line_end":39,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"($ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    use :: std :: io :: Read ; try_scan !","highlight_start":1,"highlight_end":42},{"text":"    (:: std :: io :: stdin () . bytes () . map (| c | c . unwrap ()) => $","highlight_start":1,"highlight_end":74},{"text":"     pattern, $ ($ arg), *) ; format_args ! ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":72},{"text":"} ; ($ input : expr => $ pattern : expr, $ ($ arg : expr), *) =>","highlight_start":1,"highlight_end":65},{"text":"{ { try_scan ! (@ impl question_mark ; $ input => $ pattern, $ ($ arg), *) } }","highlight_start":1,"highlight_end":79},{"text":"; (@ question_mark : $ ($ e : tt) +) => { { ($ ($ e) +) ? } } ;","highlight_start":1,"highlight_end":64},{"text":"(@ unwrap : $ ($ e : tt) +) => { { ($ ($ e) +) . unwrap () } } ;","highlight_start":1,"highlight_end":65},{"text":"(@ impl $ action : tt ; $ input : expr => $ pattern : expr, $ ($ arg : expr),","highlight_start":1,"highlight_end":78},{"text":" *) =>","highlight_start":1,"highlight_end":7},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: { Error, match_next, parse_capture } ; let pattern : &","highlight_start":1,"highlight_end":78},{"text":"        'static str = $ pattern ; let stdin : & mut Iterator < Item = u8 > = &","highlight_start":1,"highlight_end":79},{"text":"        mut ($ input) ; let mut pattern = pattern . bytes () ; $","highlight_start":1,"highlight_end":65},{"text":"        ($ arg = loop","highlight_start":1,"highlight_end":22},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             match try_scan !","highlight_start":1,"highlight_end":30},{"text":"             (@ $ action : pattern . next () . ok_or (Error :: MissingMatch))","highlight_start":1,"highlight_end":78},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 b'{' => match try_scan !","highlight_start":1,"highlight_end":42},{"text":"                 (@ $ action : pattern . next () . ok_or","highlight_start":1,"highlight_end":57},{"text":"                  (Error :: MissingClosingBrace))","highlight_start":1,"highlight_end":50},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     b'{' => try_scan !","highlight_start":1,"highlight_end":40},{"text":"                     (@ $ action : match_next (b'{', stdin)), b'}' => break","highlight_start":1,"highlight_end":76},{"text":"                     try_scan !","highlight_start":1,"highlight_end":32},{"text":"                     (@ $ action : parse_capture","highlight_start":1,"highlight_end":49},{"text":"                      (stringify ! ($ arg), pattern . next (), stdin)), _ =>","highlight_start":1,"highlight_end":77},{"text":"                     return try_scan !","highlight_start":1,"highlight_end":39},{"text":"                     (@ $ action : Err (Error :: MissingClosingBrace)),","highlight_start":1,"highlight_end":72},{"text":"                 }, c => try_scan ! (@ $ action : match_next (c, stdin)),","highlight_start":1,"highlight_end":74},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         } ;) * for c in pattern","highlight_start":1,"highlight_end":33},{"text":"        { try_scan ! (@ $ action : match_next (c, stdin)) } format_args !","highlight_start":1,"highlight_end":74},{"text":"        ($ pattern, $ ($ arg), *) ;","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/arjunaggarwal/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.7/src/lib.rs","byte_start":3125,"byte_end":3132,"line_start":101,"line_end":101,"column_start":8,"column_end":15,"is_primary":false,"text":[{"text":"    T: FromStr,","highlight_start":8,"highlight_end":15}],"label":"required by this bound in `text_io::parse_capture`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `str: std::str::FromStr` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sen: str = read!();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `std::str::FromStr` is not implemented for `str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/arjunaggarwal/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.7/src/lib.rs:101:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    T: FromStr,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by this bound in `text_io::parse_capture`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 23 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 23 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
